(* Draft v0.0.1-20210307 *)
TranslationUnit = { ImportDeclaration } , { { Attribute } , ExportableConstDeclaration };
Attribute = "[" , Identifier , "]";
ExportableConstDeclaration = [ "export" , ["default"] ] , ConstDeclaration;

ConstDeclaration = "const" , DeclarationBody;
LetDeclaration = "let" , DeclarationBody;
DeclarationBody = Identifier , [ ":", Identifier ] , "=" , Expression , ";";
(* Add Type Annotation *)

Expression = LogicalORExpression;
CallExpression = Identifier , { "." Identifier } Args;
Args = "(" , [ { Expression , "," } , Expression ] ")";
FunctionExpression = "(" , ")" , [ ":" , Identifier ] , "=>" , CompoundExpression;
ExpressionStatement = Expression , ";";
CompoundExpression = "{" , { (ExpressionStatement | ConstDeclaration | LetDeclaration | AssignmentStatement) } , [ Expression ] , "}";
(* Add type annotation for function expression. *)

PrimaryExpression = 
    (Literal | Identifier | FunctionExpression | ParenthesizedExpression | CompoundExpression),
    { { ".", Identifier }, { Args } };
ParenthesizedExpression = "(" , Expression , ")";
UnaryExpression = 
    PrimaryExpression
    | ("+" , UnaryExpression)
    | ("-" , UnaryExpression)
    | ("!" , UnaryExpression)
    | ("~" , UnaryExpression);
ExponentiationExpression = UnaryExpression | (PrimaryExpression , "**", ExponentiationExpression);
MultiplicativeExpression = ExponentiationExpression, { MultiplicativeOperator, ExponentiationExpression };
AdditiveExpression = MultiplicativeExpression, { AdditiveOperator, MultiplicativeExpression };
ShiftExpression = AdditiveExpression, { ShiftOperator, AdditiveExpression };
RelationalExpression = ShiftExpression, { RelationalOperator, ShiftExpression };
EqualityExpression = RelationalExpression, { EqualityOperator, RelationalExpression };
BitwiseANDExpression = EqualityExpression, { "&", EqualityExpression };
BitwiseXORExpression = BitwiseANDExpression, { "^", BitwiseANDExpression };
BitwiseORExpression = BitwiseXORExpression, { "|", BitwiseXORExpression }; 
LogicalANDExpression = BitwiseORExpression, { "&&", BitwiseORExpression };
LogicalORExpression = LogicalANDExpression, { "||", LogicalANDExpression };

AssignmentStatement = Identifier , { "." Identifier } , AssignmentOperator, Expression, ";";

NamedImportDeclaration = "import" , "{" , Identifier , { "," , Identifier } , "}" , "from" , (DoubleQuotesString | SingleQuotesString);
DefaultImportDeclaration = "import" , Identifier , "from" , (DoubleQuotesString | SingleQuotesString);
ImportDeclaration = (NamedImportDeclaration | DefaultImportDeclaration) , ";";

Literal = Number | DoubleQuotesString | SingleQuotesString | Boolean;
Boolean = "true" | "false";

MultiplicativeOperator = "*" | "/" | "%";
AdditiveOperator = "+" | "-";
ShiftOperator = "<<" | ">>" | ">>>";
RelationalOperator = "<" | ">" | "<=" | ">=";
EqualityOperator = "==" | "!=";
AssignmentOperator = "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" | "**=";
